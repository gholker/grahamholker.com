<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Graham Holker</title>
    <link>http://grahamholker.com/posts/</link>
    <description>Recent content in Posts on Graham Holker</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 09 Jun 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://grahamholker.com/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Find All XML Tags from the CLI</title>
      <link>http://grahamholker.com/posts/2020/06/find-all-xml-tags/</link>
      <pubDate>Tue, 09 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>http://grahamholker.com/posts/2020/06/find-all-xml-tags/</guid>
      <description>These bash one liners served me well when exploring raw HTML and XML. Once building an ingestion / cleaning pipeline I would output more detailed statistics about tag usage.
HTML For HTML, you may want to use a looser regex like this one. The regex is searching for anything starting with &amp;lt;. It allows the tag to not to be closed.
ag &amp;quot;&amp;lt;/?([^&amp;gt; ]*)?&amp;gt;?&amp;quot; path/to/html/ -io \ | sed -n -e &#39;s/^.</description>
    </item>
    
    <item>
      <title>Quick &amp; Dirty Automated Assistant</title>
      <link>http://grahamholker.com/posts/2019/quick-and-dirty-automated-assistant/</link>
      <pubDate>Sun, 06 Oct 2019 20:00:00 +0000</pubDate>
      
      <guid>http://grahamholker.com/posts/2019/quick-and-dirty-automated-assistant/</guid>
      <description>20191006 - Poor Man&#39;s Automated Assistant/*!** Twitter Bootstrap**//*!* Bootstrap v3.3.7 (http://getbootstrap.com)* Copyright 2011-2016 Twitter, Inc.* Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)*//*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */html {font-family: sans-serif;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;}body {margin: 0;}article,aside,details,figcaption,figure,footer,header,hgroup,main,menu,nav,section,summary {display: block;}audio,canvas,progress,video {display: inline-block;vertical-align: baseline;}audio:not([controls]) {display: none;height: 0;}[hidden],template {display: none;}a {background-color: transparent;}a:active,a:hover {outline: 0;}abbr[title] {border-bottom: 1px dotted;}b,strong {font-weight: bold;}dfn {font-style: italic;}h1 {font-size: 2em;margin: 0.</description>
    </item>
    
    <item>
      <title>Document Vectors with spaCy</title>
      <link>http://grahamholker.com/posts/2019/document-vectors-with-spacy/</link>
      <pubDate>Sun, 22 Sep 2019 16:50:00 +0000</pubDate>
      
      <guid>http://grahamholker.com/posts/2019/document-vectors-with-spacy/</guid>
      <description>2019-09-22 -- NLP with spaCy/*!** Twitter Bootstrap**//*!* Bootstrap v3.3.7 (http://getbootstrap.com)* Copyright 2011-2016 Twitter, Inc.* Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)*//*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */html {font-family: sans-serif;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;}body {margin: 0;}article,aside,details,figcaption,figure,footer,header,hgroup,main,menu,nav,section,summary {display: block;}audio,canvas,progress,video {display: inline-block;vertical-align: baseline;}audio:not([controls]) {display: none;height: 0;}[hidden],template {display: none;}a {background-color: transparent;}a:active,a:hover {outline: 0;}abbr[title] {border-bottom: 1px dotted;}b,strong {font-weight: bold;}dfn {font-style: italic;}h1 {font-size: 2em;margin: 0.</description>
    </item>
    
  </channel>
</rss>